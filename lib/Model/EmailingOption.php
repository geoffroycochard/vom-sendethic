<?php
/**
 * EmailingOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sendethic API
 *
 * REST API allowing you to interact with your Sendethic account.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.39
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmailingOption Class Doc Comment
 *
 * @category Class
 * @description Structure describing an email
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailingOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmailingOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mirror' => 'string',
        'mirror_paragraph' => 'string',
        'encoding' => 'string',
        'importance' => 'string',
        'content_format' => 'string',
        'recipient_display' => 'string',
        'redirect_bounce' => 'string',
        'redirect_validation' => 'string',
        'routing_option' => 'string',
        'analytics_option' => 'string',
        'xiti_prefix' => 'string',
        'xiti_tag' => 'string',
        'ga_source' => 'string',
        'ga_medium' => 'string',
        'ga_campaign' => 'string',
        'ga_content' => 'string',
        'ga_term' => 'string',
        'ga_prefix' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mirror' => null,
        'mirror_paragraph' => null,
        'encoding' => null,
        'importance' => null,
        'content_format' => null,
        'recipient_display' => null,
        'redirect_bounce' => null,
        'redirect_validation' => null,
        'routing_option' => null,
        'analytics_option' => null,
        'xiti_prefix' => null,
        'xiti_tag' => null,
        'ga_source' => null,
        'ga_medium' => null,
        'ga_campaign' => null,
        'ga_content' => null,
        'ga_term' => null,
        'ga_prefix' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mirror' => 'mirror',
        'mirror_paragraph' => 'mirrorParagraph',
        'encoding' => 'encoding',
        'importance' => 'importance',
        'content_format' => 'contentFormat',
        'recipient_display' => 'recipientDisplay',
        'redirect_bounce' => 'redirectBounce',
        'redirect_validation' => 'redirectValidation',
        'routing_option' => 'routingOption',
        'analytics_option' => 'analyticsOption',
        'xiti_prefix' => 'xitiPrefix',
        'xiti_tag' => 'xitiTag',
        'ga_source' => 'gaSource',
        'ga_medium' => 'gaMedium',
        'ga_campaign' => 'gaCampaign',
        'ga_content' => 'gaContent',
        'ga_term' => 'gaTerm',
        'ga_prefix' => 'gaPrefix'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mirror' => 'setMirror',
        'mirror_paragraph' => 'setMirrorParagraph',
        'encoding' => 'setEncoding',
        'importance' => 'setImportance',
        'content_format' => 'setContentFormat',
        'recipient_display' => 'setRecipientDisplay',
        'redirect_bounce' => 'setRedirectBounce',
        'redirect_validation' => 'setRedirectValidation',
        'routing_option' => 'setRoutingOption',
        'analytics_option' => 'setAnalyticsOption',
        'xiti_prefix' => 'setXitiPrefix',
        'xiti_tag' => 'setXitiTag',
        'ga_source' => 'setGaSource',
        'ga_medium' => 'setGaMedium',
        'ga_campaign' => 'setGaCampaign',
        'ga_content' => 'setGaContent',
        'ga_term' => 'setGaTerm',
        'ga_prefix' => 'setGaPrefix'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mirror' => 'getMirror',
        'mirror_paragraph' => 'getMirrorParagraph',
        'encoding' => 'getEncoding',
        'importance' => 'getImportance',
        'content_format' => 'getContentFormat',
        'recipient_display' => 'getRecipientDisplay',
        'redirect_bounce' => 'getRedirectBounce',
        'redirect_validation' => 'getRedirectValidation',
        'routing_option' => 'getRoutingOption',
        'analytics_option' => 'getAnalyticsOption',
        'xiti_prefix' => 'getXitiPrefix',
        'xiti_tag' => 'getXitiTag',
        'ga_source' => 'getGaSource',
        'ga_medium' => 'getGaMedium',
        'ga_campaign' => 'getGaCampaign',
        'ga_content' => 'getGaContent',
        'ga_term' => 'getGaTerm',
        'ga_prefix' => 'getGaPrefix'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mirror'] = isset($data['mirror']) ? $data['mirror'] : null;
        $this->container['mirror_paragraph'] = isset($data['mirror_paragraph']) ? $data['mirror_paragraph'] : null;
        $this->container['encoding'] = isset($data['encoding']) ? $data['encoding'] : null;
        $this->container['importance'] = isset($data['importance']) ? $data['importance'] : null;
        $this->container['content_format'] = isset($data['content_format']) ? $data['content_format'] : null;
        $this->container['recipient_display'] = isset($data['recipient_display']) ? $data['recipient_display'] : null;
        $this->container['redirect_bounce'] = isset($data['redirect_bounce']) ? $data['redirect_bounce'] : null;
        $this->container['redirect_validation'] = isset($data['redirect_validation']) ? $data['redirect_validation'] : null;
        $this->container['routing_option'] = isset($data['routing_option']) ? $data['routing_option'] : null;
        $this->container['analytics_option'] = isset($data['analytics_option']) ? $data['analytics_option'] : null;
        $this->container['xiti_prefix'] = isset($data['xiti_prefix']) ? $data['xiti_prefix'] : null;
        $this->container['xiti_tag'] = isset($data['xiti_tag']) ? $data['xiti_tag'] : null;
        $this->container['ga_source'] = isset($data['ga_source']) ? $data['ga_source'] : null;
        $this->container['ga_medium'] = isset($data['ga_medium']) ? $data['ga_medium'] : null;
        $this->container['ga_campaign'] = isset($data['ga_campaign']) ? $data['ga_campaign'] : null;
        $this->container['ga_content'] = isset($data['ga_content']) ? $data['ga_content'] : null;
        $this->container['ga_term'] = isset($data['ga_term']) ? $data['ga_term'] : null;
        $this->container['ga_prefix'] = isset($data['ga_prefix']) ? $data['ga_prefix'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mirror
     *
     * @return string
     */
    public function getMirror()
    {
        return $this->container['mirror'];
    }

    /**
     * Sets mirror
     *
     * @param string $mirror Mirror page \"false\", \"account\", \"true\"
     *
     * @return $this
     */
    public function setMirror($mirror)
    {
        $this->container['mirror'] = $mirror;

        return $this;
    }

    /**
     * Gets mirror_paragraph
     *
     * @return string
     */
    public function getMirrorParagraph()
    {
        return $this->container['mirror_paragraph'];
    }

    /**
     * Sets mirror_paragraph
     *
     * @param string $mirror_paragraph Mirror text if the mirror value is set to true
     *
     * @return $this
     */
    public function setMirrorParagraph($mirror_paragraph)
    {
        $this->container['mirror_paragraph'] = $mirror_paragraph;

        return $this;
    }

    /**
     * Gets encoding
     *
     * @return string
     */
    public function getEncoding()
    {
        return $this->container['encoding'];
    }

    /**
     * Sets encoding
     *
     * @param string $encoding Encoding format of the message ex UTF-8
     *
     * @return $this
     */
    public function setEncoding($encoding)
    {
        $this->container['encoding'] = $encoding;

        return $this;
    }

    /**
     * Gets importance
     *
     * @return string
     */
    public function getImportance()
    {
        return $this->container['importance'];
    }

    /**
     * Sets importance
     *
     * @param string $importance Importance of the mail: \"normal\", \"low\", \"high\"
     *
     * @return $this
     */
    public function setImportance($importance)
    {
        $this->container['importance'] = $importance;

        return $this;
    }

    /**
     * Gets content_format
     *
     * @return string
     */
    public function getContentFormat()
    {
        return $this->container['content_format'];
    }

    /**
     * Sets content_format
     *
     * @param string $content_format Mail format can have two value \"html\" ou \"text\", vous pouvez utiliser la variable text aussi si vous choisissez le html
     *
     * @return $this
     */
    public function setContentFormat($content_format)
    {
        $this->container['content_format'] = $content_format;

        return $this;
    }

    /**
     * Gets recipient_display
     *
     * @return string
     */
    public function getRecipientDisplay()
    {
        return $this->container['recipient_display'];
    }

    /**
     * Sets recipient_display
     *
     * @param string $recipient_display Format d'affichage de l'adresse des destinataires : \"**mb_email**\", \"**mb_firstname** **mb_lastname**\", \"**mb_lastname** **mb_firstname**\", \"**mb_firstname**\", \"{personalised}\"
     *
     * @return $this
     */
    public function setRecipientDisplay($recipient_display)
    {
        $this->container['recipient_display'] = $recipient_display;

        return $this;
    }

    /**
     * Gets redirect_bounce
     *
     * @return string
     */
    public function getRedirectBounce()
    {
        return $this->container['redirect_bounce'];
    }

    /**
     * Sets redirect_bounce
     *
     * @param string $redirect_bounce Renseignez l'adresse email sur laquelle rediriger les retours serveur (bounce)
     *
     * @return $this
     */
    public function setRedirectBounce($redirect_bounce)
    {
        $this->container['redirect_bounce'] = $redirect_bounce;

        return $this;
    }

    /**
     * Gets redirect_validation
     *
     * @return string
     */
    public function getRedirectValidation()
    {
        return $this->container['redirect_validation'];
    }

    /**
     * Sets redirect_validation
     *
     * @param string $redirect_validation Renseignez l'adresse email sur laquelle rediriger les spam-challenge
     *
     * @return $this
     */
    public function setRedirectValidation($redirect_validation)
    {
        $this->container['redirect_validation'] = $redirect_validation;

        return $this;
    }

    /**
     * Gets routing_option
     *
     * @return string
     */
    public function getRoutingOption()
    {
        return $this->container['routing_option'];
    }

    /**
     * Sets routing_option
     *
     * @param string $routing_option Rediriger l'envoi vers une adresse d'un champs personnalisé ou une adresse email que celui du destinataire
     *
     * @return $this
     */
    public function setRoutingOption($routing_option)
    {
        $this->container['routing_option'] = $routing_option;

        return $this;
    }

    /**
     * Gets analytics_option
     *
     * @return string
     */
    public function getAnalyticsOption()
    {
        return $this->container['analytics_option'];
    }

    /**
     * Sets analytics_option
     *
     * @param string $analytics_option If you want to add analytics to your links, \"no\" \"xiti\" \"google\"
     *
     * @return $this
     */
    public function setAnalyticsOption($analytics_option)
    {
        $this->container['analytics_option'] = $analytics_option;

        return $this;
    }

    /**
     * Gets xiti_prefix
     *
     * @return string
     */
    public function getXitiPrefix()
    {
        return $this->container['xiti_prefix'];
    }

    /**
     * Sets xiti_prefix
     *
     * @param string $xiti_prefix Préfixe des URLs sur lesquels utiliser les paramètres Xiti
     *
     * @return $this
     */
    public function setXitiPrefix($xiti_prefix)
    {
        $this->container['xiti_prefix'] = $xiti_prefix;

        return $this;
    }

    /**
     * Gets xiti_tag
     *
     * @return string
     */
    public function getXitiTag()
    {
        return $this->container['xiti_tag'];
    }

    /**
     * Sets xiti_tag
     *
     * @param string $xiti_tag Xiti tag
     *
     * @return $this
     */
    public function setXitiTag($xiti_tag)
    {
        $this->container['xiti_tag'] = $xiti_tag;

        return $this;
    }

    /**
     * Gets ga_source
     *
     * @return string
     */
    public function getGaSource()
    {
        return $this->container['ga_source'];
    }

    /**
     * Sets ga_source
     *
     * @param string $ga_source google analytics utm_source
     *
     * @return $this
     */
    public function setGaSource($ga_source)
    {
        $this->container['ga_source'] = $ga_source;

        return $this;
    }

    /**
     * Gets ga_medium
     *
     * @return string
     */
    public function getGaMedium()
    {
        return $this->container['ga_medium'];
    }

    /**
     * Sets ga_medium
     *
     * @param string $ga_medium google analytics utm_medium
     *
     * @return $this
     */
    public function setGaMedium($ga_medium)
    {
        $this->container['ga_medium'] = $ga_medium;

        return $this;
    }

    /**
     * Gets ga_campaign
     *
     * @return string
     */
    public function getGaCampaign()
    {
        return $this->container['ga_campaign'];
    }

    /**
     * Sets ga_campaign
     *
     * @param string $ga_campaign google analytics utm_campaign
     *
     * @return $this
     */
    public function setGaCampaign($ga_campaign)
    {
        $this->container['ga_campaign'] = $ga_campaign;

        return $this;
    }

    /**
     * Gets ga_content
     *
     * @return string
     */
    public function getGaContent()
    {
        return $this->container['ga_content'];
    }

    /**
     * Sets ga_content
     *
     * @param string $ga_content google analytics utm_content
     *
     * @return $this
     */
    public function setGaContent($ga_content)
    {
        $this->container['ga_content'] = $ga_content;

        return $this;
    }

    /**
     * Gets ga_term
     *
     * @return string
     */
    public function getGaTerm()
    {
        return $this->container['ga_term'];
    }

    /**
     * Sets ga_term
     *
     * @param string $ga_term google analytics utm_Term
     *
     * @return $this
     */
    public function setGaTerm($ga_term)
    {
        $this->container['ga_term'] = $ga_term;

        return $this;
    }

    /**
     * Gets ga_prefix
     *
     * @return string
     */
    public function getGaPrefix()
    {
        return $this->container['ga_prefix'];
    }

    /**
     * Sets ga_prefix
     *
     * @param string $ga_prefix Préfixe des URLs sur lesquels utiliser les paramètres Google Analytics
     *
     * @return $this
     */
    public function setGaPrefix($ga_prefix)
    {
        $this->container['ga_prefix'] = $ga_prefix;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


