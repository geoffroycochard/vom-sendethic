<?php
/**
 * ReceiversOperation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sendethic API
 *
 * REST API allowing you to interact with your Sendethic account.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.39
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReceiversOperation Class Doc Comment
 *
 * @category Class
 * @description This contain the different possible selection of contacts for an operation.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReceiversOperation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReceiversOperation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'segment_ids' => 'int[]',
        'import_ids' => 'int[]',
        'contact_ids' => 'int[]',
        'conditions_xml' => 'string',
        'conditions_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'segment_ids' => 'int32',
        'import_ids' => 'int32',
        'contact_ids' => 'int32',
        'conditions_xml' => null,
        'conditions_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'segment_ids' => 'segmentIds',
        'import_ids' => 'importIds',
        'contact_ids' => 'contactIds',
        'conditions_xml' => 'conditionsXml',
        'conditions_mode' => 'conditionsMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'segment_ids' => 'setSegmentIds',
        'import_ids' => 'setImportIds',
        'contact_ids' => 'setContactIds',
        'conditions_xml' => 'setConditionsXml',
        'conditions_mode' => 'setConditionsMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'segment_ids' => 'getSegmentIds',
        'import_ids' => 'getImportIds',
        'contact_ids' => 'getContactIds',
        'conditions_xml' => 'getConditionsXml',
        'conditions_mode' => 'getConditionsMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['segment_ids'] = isset($data['segment_ids']) ? $data['segment_ids'] : null;
        $this->container['import_ids'] = isset($data['import_ids']) ? $data['import_ids'] : null;
        $this->container['contact_ids'] = isset($data['contact_ids']) ? $data['contact_ids'] : null;
        $this->container['conditions_xml'] = isset($data['conditions_xml']) ? $data['conditions_xml'] : null;
        $this->container['conditions_mode'] = isset($data['conditions_mode']) ? $data['conditions_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets segment_ids
     *
     * @return int[]
     */
    public function getSegmentIds()
    {
        return $this->container['segment_ids'];
    }

    /**
     * Sets segment_ids
     *
     * @param int[] $segment_ids Liste d'id de segment
     *
     * @return $this
     */
    public function setSegmentIds($segment_ids)
    {
        $this->container['segment_ids'] = $segment_ids;

        return $this;
    }

    /**
     * Gets import_ids
     *
     * @return int[]
     */
    public function getImportIds()
    {
        return $this->container['import_ids'];
    }

    /**
     * Sets import_ids
     *
     * @param int[] $import_ids Liste d'id d'import
     *
     * @return $this
     */
    public function setImportIds($import_ids)
    {
        $this->container['import_ids'] = $import_ids;

        return $this;
    }

    /**
     * Gets contact_ids
     *
     * @return int[]
     */
    public function getContactIds()
    {
        return $this->container['contact_ids'];
    }

    /**
     * Sets contact_ids
     *
     * @param int[] $contact_ids Liste d'id de contact
     *
     * @return $this
     */
    public function setContactIds($contact_ids)
    {
        $this->container['contact_ids'] = $contact_ids;

        return $this;
    }

    /**
     * Gets conditions_xml
     *
     * @return string
     */
    public function getConditionsXml()
    {
        return $this->container['conditions_xml'];
    }

    /**
     * Sets conditions_xml
     *
     * @param string $conditions_xml Format XML
     *
     * @return $this
     */
    public function setConditionsXml($conditions_xml)
    {
        $this->container['conditions_xml'] = $conditions_xml;

        return $this;
    }

    /**
     * Gets conditions_mode
     *
     * @return string
     */
    public function getConditionsMode()
    {
        return $this->container['conditions_mode'];
    }

    /**
     * Sets conditions_mode
     *
     * @param string $conditions_mode Criterias mode \"intersect\" ou \"union\"
     *
     * @return $this
     */
    public function setConditionsMode($conditions_mode)
    {
        $this->container['conditions_mode'] = $conditions_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


